/**
 * @Author: YanLeJun
 * @Description: 我相信一切都是最好的安排
 * @File:  位运算
 * @Date: 2020/12/16 19:46
 */
package main

import "fmt"

func main() {
	// 正数的原码,反码,补码都是一样的 5--> 0000 0101
	var a int8 = 5
	// 负数的原码 -5--> 0000 0101  反码(取反):1111 1010 补码(反码+1): 1111 1100
	var b int8 = -5

	// 正数先左移 2 位 乘以2的几次方  左移规则: 右边空出的位用0填补,高位左移溢出则舍弃该高位 总结去掉左边多余的
	fmt.Println(a<<2)  // 左移 2 位：0000 010100 --> 0001 0100
	// 负数左移 2 位 操作的是也是原码
	fmt.Println(b<<2)  // -20

	// 正数右移 2 位 最小为0
	fmt.Println(a>>2) // 右移 2 位：0000 0101 --> 0000 0001   总结去掉右边多余的
	// 负数右移 2 位 最小为-1
	fmt.Println(b>>2)

	// 其他:   &与 AND， | 或OR ，^异或XOR 都是按照补码算的
	fmt.Println(a|b) // -1
	/*
		运算步骤: 两数的补码按照或运算：
			0000 0101
			1111 1100
			得出: 1111 1101   如果是正数: 它的反码与解码都是与得出的运算一致 看正负数
			进行反码(-1): 1111 1110
			原码(取反): 0000 0001
			最后结果: -1
	*/
}
